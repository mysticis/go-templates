// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0

package db

import (
	"database/sql"
	"fmt"
	"time"
)

type Taskstatus string

const (
	TaskstatusCOMPLETED Taskstatus = "COMPLETED"
	TaskstatusPENDING   Taskstatus = "PENDING"
	TaskstatusDELETED   Taskstatus = "DELETED"
)

func (e *Taskstatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Taskstatus(s)
	case string:
		*e = Taskstatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Taskstatus: %T", src)
	}
	return nil
}

type Category struct {
	ID     int64  `json:"id"`
	Name   string `json:"name"`
	UserID int64  `json:"user_id"`
}

type Comment struct {
	ID      int64         `json:"id"`
	Content string        `json:"content"`
	TaskID  int64         `json:"taskID"`
	Created time.Time     `json:"created"`
	UserID  sql.NullInt32 `json:"user_id"`
}

type File struct {
	ID          int64         `json:"id"`
	Name        string        `json:"name"`
	AutoName    string        `json:"autoName"`
	UserID      sql.NullInt64 `json:"user_id"`
	CreatedDate time.Time     `json:"created_date"`
}

type Status struct {
	ID         int64      `json:"id"`
	TaskStatus Taskstatus `json:"task_status"`
}

type Task struct {
	ID             int64         `json:"id"`
	Title          string        `json:"title"`
	Content        string        `json:"content"`
	CreatedDate    time.Time     `json:"created_date"`
	LastModifiedAt time.Time     `json:"last_modified_at"`
	FinishDate     time.Time     `json:"finish_date"`
	Priority       sql.NullInt32 `json:"priority"`
	CategoryID     sql.NullInt64 `json:"category_id"`
	TaskStatusID   sql.NullInt32 `json:"task_status_id"`
	DueDate        time.Time     `json:"due_date"`
	UserID         sql.NullInt64 `json:"user_id"`
	Hide           sql.NullInt32 `json:"hide"`
}

type User struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
}
